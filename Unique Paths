int solve(int i,int j,int row,int col,vector<vector<int>>&dp)
    {
        if(i < 0 || j < 0)
        {
            return 0;
        }
        else if(i == 0 && j == 0)
        {
            return 1;
        }
        if(dp[i][j] != -1){
            return dp[i][j];
        }
        int left = solve(i-1,j,row,col,dp);
        int right = solve(i,j-1,row,col,dp);

        return dp[i][j] = left + right;
    }
    int uniquePaths(int m, int n) {
        //vector<vector<int>>dp(m,vector<int>(n,-1));
        int dp[m][n];
        
        for(int i = 0 ; i < m ; i++){
            for(int j = 0 ; j < n ;j++)
            {
                if(i == 0 && j == 0){
                    dp[i][j] = 1;
                }
                else{
                    int top = 0,left = 0;
                    if(i > 0)
                    {
                        top = dp[i-1][j];                    
                    }
                    if(j > 0){
                        left = dp[i][j-1];
                    }   
                    dp[i][j] = top + left;
                }
            }
        }
        return dp[m-1][n-1];
    }
