int solve(vector<int>&nums,int index,vector<int>&dp)
    {
        if(index < 0)
        {
            return 0;
        }
        if(index == 0)
        {
            return nums[index];
        }

        if(dp[index] != -1)
        {
            return dp[index];
        }

        int take = solve(nums,index-2,dp) + nums[index];
        int not_take = solve(nums,index-1,dp);

        return dp[index] = max(take,not_take);
    }

    int rob(vector<int>& nums)
    {
        if(nums.size() == 1)
        {
            return nums[0];
        }
        else if(nums.size() == 2)
        {
            return max(nums[0],nums[1]);
        }
        else if(nums.size() == 3)
        {
            return max(nums[2],max(nums[0],nums[1]));
        }
        vector<int>nums1;
        for(int i = 0 ; i < nums.size()-1 ; i++)
        {
            nums1.push_back(nums[i]);
        }
        vector<int>nums2;
        for(int i = nums.size()-1 ; i > 0 ; i--)
        {
            nums2.push_back(nums[i]);
        }
        vector<int>dp(nums1.size(),0);

        dp[0] = nums1[0];
        dp[1] = max(nums1[0],nums[1]);

        for(int i = 2 ; i < nums1.size() ; i++)
        {
            dp[i] = max(dp[i-2] + nums1[i],dp[i-1]);
        }


        vector<int>dp1(nums2.size(),-1);
        dp1[0] = nums2[0];
        dp1[1] = max(nums2[0],nums2[1]);

        for(int i = 2 ; i < nums2.size() ; i++)
        {
            dp1[i] = max(dp1[i-2] + nums2[i],dp1[i-1]);
        }

        return max(dp[nums1.size()-1],dp1[nums2.size()-1]);
    }
