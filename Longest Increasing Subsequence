int solve(int i,vector<int>&a,int prev,int n,vector<vector<int>>&dp)
    {
        if(i == n)
        {
            return 0;
        }
        if(dp[i][prev+1] != -1)
        {
            return dp[i][prev+1];
        }

        int not_take = 0 + solve(i+1,a,prev,n,dp);
        int take = INT_MIN;

        if(prev == -1 || a[i] > a[prev])
        {
            take = 1 + solve(i+1,a,i,n,dp);
        }
        return dp[i][prev+1] = max(take,not_take);
    }

    int lengthOfLIS(vector<int>& nums)
    {
        vector<int>dp(nums.size(),1);
        for(int i = 1 ; i < nums.size() ; i++)
        {
            for(int j = 0 ; j < i ; j++)
            {
                if(nums[j] < nums[i])
                {
                    dp[i] = max(dp[j]+1,dp[i]);
                }
            }
        }
        int maxV = *max_element(dp.begin(),dp.end());

        return maxV;
    }
