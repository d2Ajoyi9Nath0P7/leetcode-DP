/* int solve(vector<vector<int>>&grid,int row,int col,vector<vector<int>>&dp)
     {
         if(row < 0 || col < 0 || grid[row][col] == 1){
             return 0;
         }
         if(row == 0 && col == 0){
             return 1;
         }
         if(dp[row][col] != -1){
             return dp[row][col];
         }
         int left = solve(grid,row,col-1,dp);
         int right = solve(grid,row-1,col,dp);

         return dp[row][col] = left + right;
     }*/
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid)
    {
        int row = obstacleGrid.size();
        int col = obstacleGrid[0].size();
        vector<vector<int>>dp(row,vector<int>(col,0));
        int left = 0,up = 0;
        
        for(int i = 0 ; i < row ; i++)
        {
            for(int j = 0 ; j < col ; j++)
            {
                if(i == 0 && j == 0 && obstacleGrid[i][j] == 0)
                {
                    dp[i][j] = 1;
                    continue;
                }
                else if(i == 0 || j == 0)
                {
                    if(obstacleGrid[i][j] == 1)
                    {
                        dp[i][j] = 0;
                    }
                    else
                    {
                        if(i == 0)
                        {
                            dp[i][j] = dp[i][j-1];
                        }
                        else
                        {
                            dp[i][j] = dp[i-1][j];
                        }
                    }
                }
                else
                {
                    left = dp[i][j-1];
                    up = dp[i-1][j];
                    if(obstacleGrid[i][j] == 1)
                    {
                        dp[i][j] = 0;
                    }
                    else
                    {
                        dp[i][j] = left + up;
                    }
                }
            }
        }

        for(int i = 0 ; i < row ; i++){
            for(int j = 0 ; j < col ; j++){
                cout<<dp[i][j]<<" ";
            }
            cout<<"\n";
        }
        return dp[row-1][col-1];
    }
