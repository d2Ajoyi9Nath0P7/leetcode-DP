int solve(int index,int sum,int target,int n,vector<int>&nums,vector<vector<int>>&dp,int offset)
    {
        if(index == n)
        {
            if(sum == target)
            {
                return 1;
            }
            return 0;
        }

        if(dp[index][sum+offset] != -1)
        {
            return dp[index][sum+offset];
        }

        int minus = solve(index+1,sum - nums[index],target,n,nums,dp,offset);
        int plus = solve(index+1,sum + nums[index],target,n,nums,dp,offset);

        return dp[index][sum+offset] = minus + plus;
    }

    int findTargetSumWays(vector<int>& nums, int target)
    {
        int n = nums.size();
        int offset = 1000;

        vector<vector<int>>dp(n,vector<int>(offset * 2,-1));

        return solve(0,0,target,n,nums,dp,offset);
    }
